name: CI

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  # FRONT: tests + coverage -> ARTIFACTS
  front-tests:
    name: Front tests & coverage (artifact)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "front/package-lock.json"

      - run: npm ci
      - run: npm run build --if-present

      # Tests headless + couverture LCOV (produit lcov.info + JUnit via karma-junit-reporter)
      - run: npm run test:ci -- --code-coverage

      # Artifacts: résultats de tests (JUnit XML)
      - name: Upload test results (Front)
        uses: actions/upload-artifact@v4
        with:
          name: test-results-front
          path: front/reports/**/*.xml
          if-no-files-found: warn

      # Artifacts: couverture (HTML + lcov.info)
      - name: Upload coverage (Front)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-front
          path: front/coverage/bobapp/**
          if-no-files-found: warn

  # BACK: tests + JaCoCo -> ARTIFACTS
  back-tests:
    name: Back tests & coverage (artifact)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - run: mvn -B clean verify

      # Artifacts: résultats de tests (JUnit XML)
      - name: Upload test results (Back)
        uses: actions/upload-artifact@v4
        with:
          name: test-results-back
          path: back/target/surefire-reports/*.xml
          if-no-files-found: warn

      # Artifacts: JaCoCo (HTML + XML)
      - name: Upload coverage (Back)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-back
          path: |
            back/target/site/jacoco/**
            back/target/site/jacoco/jacoco.xml
          if-no-files-found: warn

  # REPORTS: consommer les ARTIFACTS pour afficher les tests (preuve d'usage)
  report-tests:
    name: Test Reports (from artifacts)
    runs-on: ubuntu-latest
    needs: [front-tests, back-tests]
    if: success() || failure()
    steps:
      - name: Report Front (JUnit)
        uses: phoenix-actions/test-reporting@v15
        with:
          artifact: test-results-front
          name: "Front - Karma/Jasmine"
          path: "**/*.xml"
          reporter: "java-junit"

      - name: Report Back (JUnit)
        uses: phoenix-actions/test-reporting@v15
        with:
          artifact: test-results-back
          name: "Back - JUnit"
          path: "*.xml"
          reporter: "java-junit"

    # SONAR FRONT: télécharge coverage (artifact) puis scanne front/
  sonar-front:
    name: SonarCloud - Front
    runs-on: ubuntu-latest
    needs: [front-tests]
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    steps:
      - uses: actions/checkout@v4

      # Télécharge l'artifact à la racine pour garder front/coverage/bobapp/lcov.info tel quel
      - name: Download coverage (Front)
        uses: actions/download-artifact@v4
        with:
          name: coverage-front
          path: .

      - name: SonarCloud scan (front)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: front
          args: >
            -Dsonar.projectKey=a-pogam_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD_front
            -Dsonar.organization=a-pogam
            -Dsonar.branch.name=main
            -Dsonar.javascript.lcov.reportPaths=coverage/bobapp/lcov.info
          
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
          SONAR_HOST_URL: https://sonarcloud.io
        
  # SONAR BACK: recompile (no tests) pour avoir target/classes, télécharger jacoco, puis scanner back/
  sonar-back:
    name: SonarCloud - Back
    runs-on: ubuntu-latest
    needs: [back-tests]
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Build back (no tests)
        working-directory: back
        run: mvn -B -DskipTests package

      # Télécharge l'artifact à la racine pour garder back/target/site/jacoco/jacoco.xml tel quel
      - name: Download coverage (Back)
        uses: actions/download-artifact@v4
        with:
          name: coverage-back
          path: .

      - name: SonarCloud scan (back)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: back
          args: >
            -Dsonar.projectKey=a-pogam_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD_back
            -Dsonar.organization=a-pogam
            -Dsonar.branch.name=main
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
          SONAR_HOST_URL: https://sonarcloud.io
        
  # DOCKER: build & push séparés (front/back) uniquement sur push de main
  docker-publish-front:
    name: Docker Publish - FRONT
    runs-on: ubuntu-latest
    needs: [report-tests, sonar-front]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'A-Pogam'
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push (front)
        uses: docker/build-push-action@v6
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-front:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-front:main
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-front:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  docker-publish-back:
    name: Docker Publish - BACK
    runs-on: ubuntu-latest
    needs: [report-tests, sonar-back]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'A-Pogam'
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push (back)
        uses: docker/build-push-action@v6
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-back:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-back:main
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-back:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
